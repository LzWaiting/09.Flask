模板 - Templates
    1. 什么是模板
        模板是一个包含响应文本的文件（通常是html文件），该文件中允许包含“占位变量”来表示动态的内容，其具体值在请求中才能知道."占位变量"最终会被真实的值所替换。
        模板最终也会被解析成响应的字符串，这一过程称为“渲染”
        注意：Flask 本身没有模板，实际上使用的是Jinja2强大的模板引擎
    2. 模板的设置
        默认情况下，Flask会在程序文件夹中的templates 子文件夹中寻找模板
        需要手动创建 templates 文件夹
    3. 渲染模板
        在视图函数中，通过
        return render_template() 将模板渲染成字符串再响应给客户端
        render_template()语法
            render_template('xxx.html',arg1=value1,arg2=value2,...)
            参数1：xxx.html    要渲染给客户端的html模板文件
            参数2~n：          要传递给模板动态显示的变量占位符，如果没有动态的变量占位符，则可以省略
            返回值：           字符串
    4. 语法
        1. 变量
            变量是一种特殊的占位符，告诉模板引擎该位置的值是从渲染模板时的数据中来获取的
            在视图中：
                @app.route('/')
                def index():
                    return render_template('xxx/html',name="sf.zh",age=18)
                name 和 age 就是要传递到 xxx.html中的变量
            在模板中：
                {{变量名}}
            变量数据类型不限
        2. 过滤器
            1. 过滤器是允许在变量输出显示之前改变变量的值
            2. 语法
                {{变量|过滤器}}

                Jinja2 变量过滤器
                过滤器名                说明
                capitalize             首字符变大写，其他字符变小写
                lower                  把值转换成小写
                upper                  把值转换成大写
                title                  把值中的每一个单词的首字母变大写   
                trim                   把值两端的空格去掉，ltrim/rtrim,左右空格  
		truncate(200,true)     变量保留多少位，如果为true,多余部分使用...表示
        3. 控制结构
            1. if结构
                {% if 条件 %}
                    语句块
                {% endif %}   
                
                if ... else结构
                    {% if 条件 %}
                        满足条件要执行的代码
                    {% else %}
                        不满足条件要执行的代码
                    {% endif %}   
                
                if ... elif ... else结构同上
            2. for 结构
                {% for 变量 in iterable %}
                {% endfor %}
            3. 宏（在模板当中声明一个方法）
                使用 {% macro %} 标签声明宏
                et:
                    <!-- 声明宏 -->
                    {% macro show(str) %}
                        <h1>{{str}}</h1>
                    {% endmacro %}
                    
                    <!-- 调用宏 -->
                    {{show(uname)}}
                注意：为了方便重复使用，允许将宏放在单独的模板文件中声明定义
                1. 创建 macro.html
                2. 在使用的网页中，导入 macro.html 
                    {% import 'macro.html' as macros %}
                    {{ macros.show(uname) }}
            4. 模板的包含
	    	在多处重复使用的模板代码可以放在单独的文件中，可以被其他的模板所包含（引用）
		{% include 'xxx.html' %}
    5. 静态文件
    	1. 什么是静态文件？
	    在Flask中不能与服务器动态交互的文件都是静态文件
	    如：css,js,图片，音视频，... ...
	2. 静态文件的处理
	    所有静态文件都保存在项目文件夹中的static文件夹中
	    在访问静态文件的时候需要通过/static/资源路径 进行访问
	    <img src='/static/资源路径'>
	    反向解析：url_for('static',filename='<file_path>')
	    <img src="{{url_for('static',filename='images/b04.jpg')}}">
    6. 模板的继承
        1. 什么是模板的继承
	    模板的继承类似于类的继承，如果在一个模板中出现的大量内容是另外一个模板的话，那么就可以使用继承的方式来简化开发
	2. 语法
	    1. 父模板中
	        需要定义出哪些内容在子模板中是可以被重写的
		{% block 块名 %}
		{% endblock %}
		block: 定义允许在子模板中被修改的内容
		    1. 在父模板中正常显示，没有任何影响
		    2. 在子模板中可以被重写
	    2. 子模板中
	    	1. 使用 {% extends '父模板名称' %} 来完成继承
		2. 使用 {% block 块名 %} 来重写父模板中的同名内容
		    {% block 块名 %}
		        覆盖掉父模板中的内容
		    {% endblock %}
		    允许通过{{super()}} 来调用父模板中的内容